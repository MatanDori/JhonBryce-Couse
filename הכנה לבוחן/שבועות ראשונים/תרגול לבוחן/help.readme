# Creating a structured JavaScript file containing all relevant functions
js_code = """
// =============================
// Local Storage Functions
// =============================

// Save data to localStorage
function saveToLocalStorage(key, value) {
    localStorage.setItem(key, JSON.stringify(value));
}

// Load data from localStorage
function loadFromLocalStorage(key) {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : [];
}

// Remove an item from localStorage
function removeFromLocalStorage(key) {
    localStorage.removeItem(key);
}

// =============================
// General Utility Functions
// =============================

// Get object by ID from an array
function getObjectById(id, array) {
    if (!Array.isArray(array)) return null;
    for (let i = 0; i < array.length; i++) {
        if (array[i].id === id) {
            return array[i];
        }
    }
    return null;
}

// Get index of object in an array by ID
function getObjectIndexById(id, array) {
    if (!Array.isArray(array)) return -1;
    for (let i = 0; i < array.length; i++) {
        if (array[i].id === id) {
            return i;
        }
    }
    return -1;
}

// =============================
// Functions for Managing Favorites
// =============================

// Add an item to favorites
function addToFavorites(id, dataArray, storageKey) {
    const favoriteItem = getObjectById(id, dataArray);
    if (!favoriteItem) return;

    let favoritesArray = loadFromLocalStorage(storageKey);
    let found = favoritesArray.some(item => item.id === id);

    if (!found) {
        favoritesArray.push(favoriteItem);
        saveToLocalStorage(storageKey, favoritesArray);
        alertSuccess("Added to favorites!");
    } else {
        alertError("Already in favorites!");
    }
}

// Remove an item from favorites
function removeFromFavorites(id, storageKey) {
    let favoritesArray = loadFromLocalStorage(storageKey);
    favoritesArray = favoritesArray.filter(item => item.id !== id);
    saveToLocalStorage(storageKey, favoritesArray);
    alertSuccess("Removed from favorites");
}

// =============================
// UI Functions - Cards
// =============================

// Generate a card HTML template
function getCardTemplate(data, action) {
    return `<div class="card">
                <h3>${data.Title} (${data.Year})</h3>
                <p>${data.Genre}</p>
                <button onclick="${action}('${data.id}')">${action === 'addToFavorites' ? 'Add to Favorites' : 'Remove'}</button>
            </div>`;
}

// Load cards into a given container
function loadCards(array, targetContent, action) {
    if (!Array.isArray(array)) return;
    const content = document.getElementById(targetContent);
    if (!content) return;
    content.innerHTML = "";

    array.forEach(item => {
        content.innerHTML += getCardTemplate(item, action);
    });
}

// =============================
// UI Functions - Table
// =============================

// Load a table with data
function loadTable(dataArray, tableBodyId) {
    let tableBody = document.getElementById(tableBodyId);
    if (!tableBody) return;
    tableBody.innerHTML = "";

    dataArray.forEach(item => {
        let row = `<tr>
            <td>${item.createdAt}</td>
            <td>${item.amountWithoutVAT}</td>
            <td>${item.amountWithVAT}</td>
            <td>${item.netIncomeAfterTax}</td>
            <td>${item.taxDeduction}</td>
            <td><button class="btn btn-danger" onclick="deleteRow(this)">🗑</button></td>
        </tr>`;
        tableBody.innerHTML += row;
    });
}

// Delete a row from a table
function deleteRow(button) {
    button.closest("tr").remove();
}

// =============================
// Chart & Statistics Functions
// =============================

// Generate a pie chart from dataset
function generatePieChart(canvasId, data) {
    const ctx = document.getElementById(canvasId).getContext("2d");
    new Chart(ctx, {
        type: "pie",
        data: {
            labels: Object.keys(data),
            datasets: [{
                data: Object.values(data),
                backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56"],
            }]
        }
    });
}

// =============================
// Search & Filter Functions
// =============================

// Search items in an array by a keyword
function searchItems(keyword, array, key) {
    return array.filter(item => item[key].toLowerCase().includes(keyword.toLowerCase()));
}

// =============================
// Notifications
// =============================

// Show success alert
function alertSuccess(message) {
    Swal.fire({
        title: message,
        icon: "success"
    });
}

// Show error alert
function alertError(message) {
    Swal.fire({
        title: message,
        icon: "error"
    });
}

// =============================
// Initialization Function
// =============================

// Initialize event listeners
function init() {
    document.getElementById("addMoneyButton")?.addEventListener("click", function () {
        addMoney();
    });
    document.getElementById("loadTable")?.addEventListener("click", function () {
        loadIncomeTable();
    });
    document.getElementById("deleteData")?.addEventListener("click", function () {
        clearTable();
    });
}

document.addEventListener("DOMContentLoaded", init);
"""

# Save the JavaScript file
file_path = "/mnt/data/utility_functions.js"
with open(file_path, "w") as f:
    f.write(js_code)

# Provide download link
file_path



// פונקציות כלליות לעבודה עם Local Storage
function saveToLocalStorage(key, data) {
    localStorage.setItem(key, JSON.stringify(data));
}

function loadFromLocalStorage(key) {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : [];
}

function removeFromLocalStorage(key) {
    localStorage.removeItem(key);
}

// פונקציה להוספת פריט למערך ושמירה ב-LocalStorage
function addItemToLocalStorageArray(key, item) {
    let dataArray = loadFromLocalStorage(key);
    dataArray.push(item);
    saveToLocalStorage(key, dataArray);
}

// פונקציה למחיקת פריט ממערך ב-LocalStorage
function removeItemFromLocalStorageArray(key, idProperty, idValue) {
    let dataArray = loadFromLocalStorage(key);
    dataArray = dataArray.filter(item => item[idProperty] !== idValue);
    saveToLocalStorage(key, dataArray);
}

// פונקציות לעבודה עם טבלאות
function clearTable(tableId) {
    document.getElementById(tableId).innerHTML = "";
}

function appendRowToTable(tableId, rowData) {
    let tableBody = document.getElementById(tableId);
    let row = document.createElement("tr");

    rowData.forEach(data => {
        let td = document.createElement("td");
        td.innerHTML = data;
        row.appendChild(td);
    });

    // הוספת כפתור מחיקה לכל שורה
    let deleteButton = getDeleteButton(row);
    row.appendChild(deleteButton);

    tableBody.appendChild(row);
}

// פונקציה ליצירת כפתור מחיקה
function getDeleteButton(row) {
    let td = document.createElement("td");
    let button = document.createElement("button");
    button.classList.add("btn", "btn-danger");
    button.innerHTML = '<i class="bi bi-trash3"></i>';
    button.onclick = function () {
        row.remove();
    };
    td.appendChild(button);
    return td;
}

// פונקציה להוספת נתונים לטבלה מתוך LocalStorage
function loadTableFromLocalStorage(tableId, storageKey) {
    let tableBody = document.getElementById(tableId);
    clearTable(tableId);
    
    let dataArray = loadFromLocalStorage(storageKey);
    dataArray.forEach(item => {
        appendRowToTable(tableId, Object.values(item));
    });
}

// פונקציות לחישובי מע"מ וניכוי מס
function calculateVAT(amount, vatRate, isIncluded) {
    return isIncluded ? amount / (1 + vatRate) : amount * vatRate;
}

function calculateNetIncome(amount, taxDeduction) {
    return amount - (amount * taxDeduction);
}

// פונקציה ליצירת אובייקט הכנסה
function createIncomeObject(amount, vatRate, taxDeduction, incomeSource, isVATIncluded) {
    let amountWithoutVAT = isVATIncluded ? amount / (1 + vatRate) : amount;
    let amountWithVAT = isVATIncluded ? amount : amount * (1 + vatRate);

    return {
        createdAt: new Date().toLocaleDateString(),
        amountWithoutVAT: amountWithoutVAT.toFixed(2),
        amountWithVAT: amountWithVAT.toFixed(2),
        netIncomeAfterTax: calculateNetIncome(amountWithoutVAT, taxDeduction).toFixed(2),
        incomeSource: incomeSource,
        taxDeduction: (taxDeduction * 100).toFixed(2) + "%",
        vatRate: (vatRate * 100).toFixed(2) + "%"
    };
}

// פונקציית חיפוש במערך נתונים לפי מחרוזת חיפוש
function searchInArray(array, searchTerm, property) {
    return array.filter(item => item[property].toLowerCase().includes(searchTerm.toLowerCase()));
}

// פונקציה לסינון נתונים
function filterArrayByCondition(array, conditionCallback) {
    return array.filter(conditionCallback);
}

// פונקציה למיון מערך לפי מאפיין
function sortArrayByProperty(array, property, ascending = true) {
    return array.sort((a, b) => {
        if (a[property] < b[property]) return ascending ? -1 : 1;
        if (a[property] > b[property]) return ascending ? 1 : -1;
        return 0;
    });
}


# Creating the first file: Complex Functions Reference
complex_functions_content = """
// Complex Functions Reference
// This file contains various functions used for handling arrays, localStorage, and table manipulations.

/**
 * Save a value to localStorage
 * @param {string} key - The key under which the data will be stored.
 * @param {any} value - The value to store.
 */
function saveToLocalStorage(key, value) {
    localStorage.setItem(key, JSON.stringify(value));
}

/**
 * Load a value from localStorage
 * @param {string} key - The key to retrieve data from.
 * @returns {any} The parsed JSON value or null if not found.
 */
function loadFromLocalStorage(key) {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
}

/**
 * Add a new item to an array stored in localStorage
 * @param {string} key - The key of the localStorage array.
 * @param {object} newItem - The new item to be added.
 */
function addItemToLocalStorageArray(key, newItem) {
    let existingArray = loadFromLocalStorage(key) || [];
    existingArray.push(newItem);
    saveToLocalStorage(key, existingArray);
}

/**
 * Remove an item from localStorage array by id
 * @param {string} key - The key of the localStorage array.
 * @param {string} id - The id of the item to be removed.
 */
function removeItemFromLocalStorageArray(key, id) {
    let existingArray = loadFromLocalStorage(key) || [];
    existingArray = existingArray.filter(item => item.id !== id);
    saveToLocalStorage(key, existingArray);
}

/**
 * Search in an array of objects
 * @param {Array} arr - The array to search in.
 * @param {string} text - The search text.
 * @param {string} field - The object field to search within.
 * @returns {Array} Filtered search results.
 */
function searchArray(arr, text, field) {
    if (!Array.isArray(arr)) return [];
    if (!text) return arr;
    return arr.filter(item => item[field]?.toLowerCase().includes(text.toLowerCase()));
}

/**
 * Generate a dynamic table from an array of objects.
 * @param {Array} dataArray - The data array.
 * @param {string} tableBodyId - The id of the table body.
 */
function loadTable(dataArray, tableBodyId) {
    let tableBody = document.getElementById(tableBodyId);
    if (!tableBody) return;
    tableBody.innerHTML = "";
    dataArray.forEach(data => {
        let row = "<tr>";
        for (let key in data) {
            row += `<td>${data[key]}</td>`;
        }
        row += `<td><button class="btn btn-danger" onclick="removeItem('${data.id}')">Delete</button></td>`;
        row += "</tr>";
        tableBody.innerHTML += row;
    });
}

/**
 * Clear a table's content
 * @param {string} tableBodyId - The id of the table body.
 */
function clearTable(tableBodyId) {
    let tableBody = document.getElementById(tableBodyId);
    if (tableBody) tableBody.innerHTML = "";
}
"""

# Creating the second file: Practice Task in Hebrew
practice_task_content = """<!DOCTYPE html>
<html lang="he">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>תרגול מערכת ניהול הכנסות</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="container">
    <h1 class="mt-4">מערכת לניהול הכנסות</h1>

    <label for="income">הכנסה:</label>
    <input type="number" id="income" class="form-control">

    <label for="vat">מע"מ (%):</label>
    <input type="number" id="vat" class="form-control">

    <label for="tax">ניכוי מס במקור (%):</label>
    <input type="number" id="tax" class="form-control">

    <button id="addIncome" class="btn btn-primary mt-3">הוסף הכנסה</button>
    <button id="clearTable" class="btn btn-danger mt-3">נקה טבלה</button>

    <h2 class="mt-4">טבלת הכנסות</h2>
    <table class="table">
        <thead>
            <tr>
                <th>תאריך</th>
                <th>סכום ללא מע"מ</th>
                <th>סכום המע"מ</th>
                <th>ניכוי מס</th>
                <th>סה"כ</th>
                <th>פעולות</th>
            </tr>
        </thead>
        <tbody id="incomeTable"></tbody>
    </table>

    <script>
        document.getElementById("addIncome").addEventListener("click", function() {
            const income = parseFloat(document.getElementById("income").value);
            const vatRate = parseFloat(document.getElementById("vat").value) / 100;
            const taxRate = parseFloat(document.getElementById("tax").value) / 100;
            
            if (isNaN(income) || income <= 0) {
                alert("נא להזין סכום הכנסה תקין");
                return;
            }

            const vatAmount = income * vatRate;
            const netIncome = income - (income * taxRate);
            const totalAmount = netIncome + vatAmount;
            
            const tableBody = document.getElementById("incomeTable");
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${new Date().toLocaleDateString()}</td>
                <td>${income.toFixed(2)}</td>
                <td>${vatAmount.toFixed(2)}</td>
                <td>${(income * taxRate).toFixed(2)}</td>
                <td>${totalAmount.toFixed(2)}</td>
                <td><button class="btn btn-danger" onclick="this.parentElement.parentElement.remove()">🗑️</button></td>
            `;
            tableBody.appendChild(row);
        });

        document.getElementById("clearTable").addEventListener("click", function() {
            document.getElementById("incomeTable").innerHTML = "";
        });
    </script>
</body>
</html>
"""

Basic Local Storage Methods
Method	Description
localStorage.setItem(key, value)	Stores a value under a key.
localStorage.getItem(key)	Retrieves the value stored under a key.
localStorage.removeItem(key)	Deletes a specific key-value pair.
localStorage.clear()	Clears all stored data in local storage.

// Store data
localStorage.setItem("username", "Perry");

// Retrieve data
let user = localStorage.getItem("username");
console.log(user); // Output: "Perry"

// Remove an item
localStorage.removeItem("username");

// Clear all local storage
localStorage.clear();

//JSON stringify
Example: Converting an Object to a JSON String
javascript
Copy
Edit
let user = {
    name: "Perry",
    age: 22,
    skills: ["JavaScript", "React", "Node.js"]
};

let userString = JSON.stringify(user);
console.log(userString);
/*
Output:
'{"name":"Perry","age":22,"skills":["JavaScript","React","Node.js"]}'
*/
Storing Objects in Local Storage
javascript
Copy
Edit
localStorage.setItem("user", JSON.stringify(user));

6️⃣ Date & Time Handling
Current Date
js
const today = new Date();
console.log(today.toLocaleDateString()); // Output: 3/6/2025 (Format depends on location)

Getting Specific Date Components
const now = new Date();
console.log(now.getFullYear()); // Output: 2025
console.log(now.getMonth() + 1); // Output: 3 (Months are 0-indexed)
console.log(now.getDate()); // Output: 6

Using Date Input Field
html
<input type="date" id="myDate">
<button onclick="getDate()">Submit</button>

<script>
function getDate() {
    const dateValue = document.getElementById("myDate").value;
    console.log("Selected Date:", dateValue);
}
</script>

//select Area
function selectAllRows() {
    const tableRows = document.querySelectorAll("#incomeTable tr"); // בחירת כל השורות בטבלה
    tableRows.forEach(row => {
        row.classList.toggle("selected"); // הוספת/הסרת מחלקה של שורה נבחרת
    });
}

<button id="selectAllButton" onclick="selectAllRows()">Select All</button>

.selected {
    background-color: lightblue; /* רקע כחול בהיר כדי להדגיש את השורה הנבחרת */
}
//שורה אחת
function getSelectButton(row) {
    const button = document.createElement("button");
    button.classList.add("btn", "btn-info"); // Bootstrap classes
    button.innerText = "Select";

    // פונקציה לסימון/ביטול סימון של השורה
    button.onclick = function () {
        row.classList.toggle("selectedRow"); // הוספה/הסרה של המחלקה
    };

    const tdButton = document.createElement("td");
    tdButton.appendChild(button);
    return tdButton;
}

function loadTable() {
    let dataArrayString = localStorage.getItem("dataArea");
    let dataArray = JSON.parse(dataArrayString) || []; 
    let tableBody = document.getElementById("actionTable");
    clearTable();

    dataArray.forEach((data, index) => {
        let tableRow = document.createElement("tr");
        tableRow.innerHTML = `
            <td>${data.createdAt}</td>
            <td>${data.Action}</td> 
            <td>${data.Amount} $</td>
            <td>${data.Reason}</td>
        `;

        tableRow.appendChild(getSelectButton(tableRow)); // כפתור בחירה
        tableRow.appendChild(getDeleteButton(index)); // כפתור מחיקה

        tableBody.appendChild(tableRow);
    });
}


.selectedRow {
    background-color: lightblue !important;
}
